import React, { useState } from 'react';
import './App.css';

const Grid = () => {
  const [lockedRows, setLockedRows] = useState([]);
  const [randomWord] = useState(getRandomWord());
  const [gameOver, setGameOver] = useState(false);

  function getRandomWord() {
    const polishWords = [
      'CYTAT','RAMKA','LAMPA','SUFIT','BALET','AKORD','DETAL','DESKA','MOTYW','AKRYL',
    ];
    const randomIndex = Math.floor(Math.random() * polishWords.length);
    return polishWords[randomIndex];
  }

  const handleInput = (currentIndex, rowIndex) => (event) => {
    let inputValue = event.target.value;

    if (inputValue.length > 1) {
      inputValue = inputValue.slice(0, 1);
      event.target.value = inputValue;
    }

    if (event.key === 'Enter') {
      const rowInputs = Array.from(
        document.querySelectorAll(`.griddiv .row:nth-child(${rowIndex}) input`)
      );

      const isRowFilled = rowInputs.every((input) => input.value !== '');

      if (isRowFilled) {
        const nextRowIndex = rowIndex + 1;
        const nextInput = document.querySelector(
          `.griddiv .row:nth-child(${nextRowIndex}) input:nth-child(1)`
        );
        if (nextInput) {
          nextInput.focus();
          setLockedRows((prevLockedRows) => [...prevLockedRows, rowIndex]);
        }

        let isRowCorrect = true;

        rowInputs.forEach((input, index) => {
          const enteredLetter = input.value.toUpperCase();
          const randomLetter = randomWord[index];

          if (enteredLetter === randomLetter) {
            input.style.backgroundColor = '#588c4c';
          } else if (randomWord.includes(enteredLetter)) {
            input.style.backgroundColor = '#b89c3c';
            isRowCorrect = false;
          } else {
            isRowCorrect = false;
          }
        });

        if (
          isRowCorrect &&
          randomWord === rowInputs.map((input) => input.value.toUpperCase()).join('')
        ) {
          alert('Congratulations! You won!');
          setGameOver(true);
          setLockedRows(Array.from({ length: 6 }, (_, i) => i + 1)); // Disable all rows
        } else if (!isRowCorrect && rowIndex === 6) {
          setLockedRows((prevLockedRows) => [...prevLockedRows, rowIndex]); // Lock the last row
          alert('You lost the game. Good luck next time!');
          setGameOver(true);
        }
      }
    } else if (event.key === 'Backspace') {
      if (inputValue === '') {
        const previousIndex = currentIndex - 1;
        const previousInput = document.querySelector(
          `.griddiv .row:nth-child(${rowIndex}) input:nth-child(${previousIndex})`
        );
        if (previousInput) {
          previousInput.focus();
          previousInput.value = '';
        }
      }
    } else if (inputValue.length === 1) {
      const nextIndex = currentIndex + 1;
      const nextInput = document.querySelector(
        `.griddiv .row:nth-child(${rowIndex}) input:nth-child(${nextIndex})`
      );
      if (nextInput) {
        nextInput.focus();
      }
    }
  };

  return (
    <>
      <nav className="gamename">{lockedRows.includes(6) ? randomWord : 'Wordle'}</nav>
      <div className="container">
        <div className="griddiv">
          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 1)} disabled={lockedRows.includes(1) || gameOver} />
            <input type="text" onKeyUp={handleInput(2, 1)} disabled={lockedRows.includes(1) || gameOver} />
            <input type="text" onKeyUp={handleInput(3, 1)} disabled={lockedRows.includes(1) || gameOver} />
            <input type="text" onKeyUp={handleInput(4, 1)} disabled={lockedRows.includes(1) || gameOver} />
            <input type="text" onKeyUp={handleInput(5, 1)} disabled={lockedRows.includes(1) || gameOver} />
          </div>

          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 2)} disabled={lockedRows.includes(2)} />
            <input type="text" onKeyUp={handleInput(2, 2)} disabled={lockedRows.includes(2)} />
            <input type="text" onKeyUp={handleInput(3, 2)} disabled={lockedRows.includes(2)} />
            <input type="text" onKeyUp={handleInput(4, 2)} disabled={lockedRows.includes(2)} />
            <input type="text" onKeyUp={handleInput(5, 2)} disabled={lockedRows.includes(2)} />
          </div>

          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 3)} disabled={lockedRows.includes(3)} />
            <input type="text" onKeyUp={handleInput(2, 3)} disabled={lockedRows.includes(3)} />
            <input type="text" onKeyUp={handleInput(3, 3)} disabled={lockedRows.includes(3)} />
            <input type="text" onKeyUp={handleInput(4, 3)} disabled={lockedRows.includes(3)} />
            <input type="text" onKeyUp={handleInput(5, 3)} disabled={lockedRows.includes(3)} />
          </div>

          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 4)} disabled={lockedRows.includes(4)} />
            <input type="text" onKeyUp={handleInput(2, 4)} disabled={lockedRows.includes(4)} />
            <input type="text" onKeyUp={handleInput(3, 4)} disabled={lockedRows.includes(4)} />
            <input type="text" onKeyUp={handleInput(4, 4)} disabled={lockedRows.includes(4)} />
            <input type="text" onKeyUp={handleInput(5, 4)} disabled={lockedRows.includes(4)} />
          </div>

          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 5)} disabled={lockedRows.includes(5)} />
            <input type="text" onKeyUp={handleInput(2, 5)} disabled={lockedRows.includes(5)} />
            <input type="text" onKeyUp={handleInput(3, 5)} disabled={lockedRows.includes(5)} />
            <input type="text" onKeyUp={handleInput(4, 5)} disabled={lockedRows.includes(5)} />
            <input type="text" onKeyUp={handleInput(5, 5)} disabled={lockedRows.includes(5)} />
          </div>

          <div className="row">
            <input type="text" onKeyUp={handleInput(1, 6)} disabled={lockedRows.includes(6)} />
            <input type="text" onKeyUp={handleInput(2, 6)} disabled={lockedRows.includes(6)} />
            <input type="text" onKeyUp={handleInput(3, 6)} disabled={lockedRows.includes(6)} />
            <input type="text" onKeyUp={handleInput(4, 6)} disabled={lockedRows.includes(6)} />
            <input type="text" onKeyUp={handleInput(5, 6)} disabled={lockedRows.includes(6)} />
          </div>

        </div>
      </div>
    </>
  );
};

export default Grid;